import { SignalMessage, SignallingClientOptions } from '../types';
export declare class SignallingClient {
    protected url: URL;
    protected sessionId: string;
    protected heartbeatIntervalSeconds: number;
    protected maxWsReconnectionAttempts: number;
    protected onSignalMessageReceivedCallback?: (msg: SignalMessage) => Promise<void> | void;
    protected onClientConnectedCallback?: () => Promise<void> | void;
    protected onClientConnectionFailureCallback?: () => Promise<void> | void;
    private stopSignal;
    private sendingBuffer;
    private wsConnectionAttempts;
    private socket;
    private heartBeatIntervalRef;
    constructor(sessionId: string, options: SignallingClientOptions, onSignalMessageReceivedCallback?: (msg: SignalMessage) => Promise<void> | void, onClientConnectedCallback?: () => Promise<void> | void, onClientConnectionFailureCallback?: () => Promise<void> | void);
    stop(): void;
    connect(): WebSocket;
    sendOffer(localDescription: RTCSessionDescription): Promise<void>;
    sendIceCandidate(candidate: RTCIceCandidate): Promise<void>;
    private sendSignalMessage;
    private closeSocket;
    private onOpen;
    private onClose;
    private onError;
    private flushSendingBuffer;
    private onMessage;
    private startSendingHeartBeats;
}
//# sourceMappingURL=SignallingClient.d.ts.map