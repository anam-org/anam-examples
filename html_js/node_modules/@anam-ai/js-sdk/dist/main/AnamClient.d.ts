import { ConnectionCallbacks, InputAudioState, PersonaConfig } from './types';
import { AnamClientOptions } from './types/AnamClientOptions';
export default class AnamClient {
    protected sessionToken: string | undefined;
    protected apiKey: string | undefined;
    private personaConfig;
    private sessionId;
    private streamingClient;
    private apiClient;
    private _isStreaming;
    private inputAudioState;
    constructor(sessionToken: string | undefined, personaConfig: PersonaConfig, options?: AnamClientOptions);
    private startSession;
    private startSessionIfNeeded;
    stream(callbacks?: ConnectionCallbacks, userProvidedAudioStream?: MediaStream): Promise<MediaStream[]>;
    streamToVideoAndAudioElements(videoElementId: string, audioElementId: string, callbacks?: ConnectionCallbacks, userProvidedMediaStream?: MediaStream): Promise<void>;
    talk(content: string): Promise<void>;
    sendDataMessage(message: string): void;
    stopStreaming(): Promise<void>;
    isStreaming(): boolean;
    setPersonaConfig(personaConfig: PersonaConfig): void;
    getPersonaConfig(): PersonaConfig | undefined;
    getInputAudioState(): InputAudioState;
    muteInputAudio(): InputAudioState;
    unmuteInputAudio(): InputAudioState;
}
//# sourceMappingURL=AnamClient.d.ts.map