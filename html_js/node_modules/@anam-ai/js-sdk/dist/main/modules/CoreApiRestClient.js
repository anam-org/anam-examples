"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CoreApiRestClient = void 0;
const constants_1 = require("../lib/constants");
class CoreApiRestClient {
    constructor(sessionToken, apiKey, options) {
        if (!sessionToken && !apiKey) {
            throw new Error('Either sessionToken or apiKey must be provided');
        }
        this.sessionToken = sessionToken || null;
        this.apiKey = apiKey || null;
        this.baseUrl = (options === null || options === void 0 ? void 0 : options.baseUrl) || constants_1.DEFAULT_API_BASE_URL;
        this.apiVersion = (options === null || options === void 0 ? void 0 : options.apiVersion) || constants_1.DEFAULT_API_VERSION;
    }
    startSession(personaConfig) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.sessionToken) {
                this.sessionToken = yield this.unsafe_getSessionToken();
            }
            try {
                const response = yield fetch(`${this.getApiUrl()}/engine/session`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        Authorization: `Bearer ${this.sessionToken}`,
                    },
                    body: JSON.stringify({ personaConfig }),
                });
                const data = yield response.json();
                return data;
            }
            catch (error) {
                throw new Error('Failed to start session');
            }
        });
    }
    unsafe_getSessionToken() {
        return __awaiter(this, void 0, void 0, function* () {
            console.warn('Using unsecure method. This method should not be used in production.');
            if (!this.apiKey) {
                throw new Error('No apiKey provided');
            }
            try {
                const response = yield fetch(`${this.getApiUrl()}/auth/session-token`, {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json',
                        Authorization: `Bearer ${this.apiKey}`,
                    },
                });
                const data = yield response.json();
                return data.sessionToken;
            }
            catch (e) {
                throw new Error('Failed to get session token');
            }
        });
    }
    getApiUrl() {
        return `${this.baseUrl}${this.apiVersion}`;
    }
}
exports.CoreApiRestClient = CoreApiRestClient;
//# sourceMappingURL=CoreApiRestClient.js.map