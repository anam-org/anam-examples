import { InputAudioState } from '../types';
import { ConnectionCallbacks, TextMessageEvent } from '../types/streaming';
import { StreamingClientOptions } from '../types/streaming/StreamingClientOptions';
import { EngineApiRestClient } from './EngineApiRestClient';
import { SignallingClient } from './SignallingClient';
export declare class StreamingClient {
    protected signallingClient: SignallingClient;
    protected engineApiRestClient: EngineApiRestClient;
    protected iceServers: RTCIceServer[];
    protected onReceiveMessageCallback?: (messageEvent: TextMessageEvent) => void;
    protected onConnectionEstablishedCallback?: () => void;
    protected onConnectionClosedCallback?: (reason: string) => void;
    protected onInputAudioStreamStartCallback?: (audioStream: MediaStream) => void;
    protected onVideoStreamStartCallback?: (videoStream: MediaStream) => void;
    protected onAudioStreamStartCallback?: (audioStream: MediaStream) => void;
    protected onVideoPlayStartedCallback?: () => void;
    private peerConnection;
    private connectionReceivedAnswer;
    private remoteIceCandidateBuffer;
    private inputAudioStream;
    private dataChannel;
    private videoElement;
    private videoStream;
    private audioElement;
    private audioStream;
    private inputAudioState;
    constructor(sessionId: string, options: StreamingClientOptions);
    private onInputAudioStateChange;
    private muteAllAudioTracks;
    private unmuteAllAudioTracks;
    muteInputAudio(): InputAudioState;
    unmuteInputAudio(): InputAudioState;
    getInputAudioState(): InputAudioState;
    getPeerConnection(): RTCPeerConnection | null;
    getInputAudioStream(): MediaStream | null;
    getVideoStream(): MediaStream | null;
    getAudioStream(): MediaStream | null;
    setOnVideoStreamStartCallback(callback: (videoStream: MediaStream) => void): void;
    setOnAudioStreamStartCallback(callback: (audioStream: MediaStream) => void): void;
    sendDataMessage(message: string): void;
    setMediaStreamTargetsById(videoElementId: string, audioElementId: string): void;
    startConnection(callbacks: ConnectionCallbacks): void;
    stopConnection(): void;
    sendTalkCommand(content: string): Promise<void>;
    private setConnectionCallbacks;
    private initPeerConnection;
    private onSignalMessage;
    private onSignallingClientConnected;
    private onSignallingClientFailed;
    private flushRemoteIceCandidateBuffer;
    /**
     * ICE Candidate Trickle
     * As each ICE candidate is gathered from the STUN server it is sent to the
     * webRTC server immediately in an effort to reduce time to connection.
     */
    private onIceCandidate;
    private onIceConnectionStateChange;
    private onConnectionStateChange;
    private handleWebrtcFailure;
    private onTrackEventHandler;
    /**
     * Set up the data channels for sending and receiving messages
     */
    private setupDataChannels;
    private initPeerConnectionAndSendOffer;
    private shutdown;
}
//# sourceMappingURL=StreamingClient.d.ts.map