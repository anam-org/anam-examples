"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EngineApiRestClient = void 0;
class EngineApiRestClient {
    constructor(baseUrl, sessionId) {
        this.baseUrl = baseUrl;
        this.sessionId = sessionId;
    }
    sendTalkCommand(content) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const response = yield fetch(`${this.baseUrl}/talk?session_id=${this.sessionId}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        content,
                    }),
                });
                if (!response.ok) {
                    throw new Error(`Failed to send talk command: ${response.status} ${response.statusText}`);
                }
            }
            catch (error) {
                console.error(error);
                throw new Error('EngineApiRestClient - sendTalkCommand: Failed to send talk command');
            }
        });
    }
}
exports.EngineApiRestClient = EngineApiRestClient;
//# sourceMappingURL=EngineApiRestClient.js.map